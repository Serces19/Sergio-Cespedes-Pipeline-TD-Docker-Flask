{
  "K:\\Code\\Sergio Cespedes Pipeline TD Docker Flask": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "K:\\Code\\Sergio Cespedes Pipeline TD Docker Flask",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "flask-lambda-app",
      "org": "sergiocestd",
      "app": "sergio-cespedes-td-web",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "region": "us-east-1",
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/flask-lambda-app-dev-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "flask-lambda-app",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/flask-lambda-app-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/flask-lambda-app-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "flask-lambda-app",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-a0dd1a2c-a04e",
                  "S3Key": "serverless/flask-lambda-app/dev/1731471434960-2024-11-13T04:17:14.960Z/flask-lambda-app.zip"
                },
                "Handler": "wsgi_handler.handler",
                "Runtime": "python3.12",
                "FunctionName": "flask-lambda-app-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionNpEbXNx9xaP5VFWkb95hQrPqkPDCeozQSJtEVaNU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "kygOpW68hV1hGQ6HJduF5rX+q5eaqysAE6mNlQ50+Cs="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-flask-lambda-app",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1731471422770": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAny",
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-a0dd1a2c-a04e",
              "Export": {
                "Name": "sls-flask-lambda-app-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionNpEbXNx9xaP5VFWkb95hQrPqkPDCeozQSJtEVaNU"
              },
              "Export": {
                "Name": "sls-flask-lambda-app-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-flask-lambda-app-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "app": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": {
                "path": "",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "flask-lambda-app-dev-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionNpEbXNx9xaP5VFWkb95hQrPqkPDCeozQSJtEVaNU"
        }
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        }
      }
    },
    "serviceRawFile": "service: flask-lambda-app\r\norg: sergiocestd\r\napp: sergio-cespedes-td-web\r\nprovider:\r\n  name: aws\r\n  runtime: python3.12\r\n  region: us-east-1\r\n\r\nfunctions:\r\n  app:\r\n    handler: wsgi_handler.handler\r\n    events:\r\n      - http:\r\n          path: /\r\n          method: ANY\r\n      - http:\r\n          path: /{proxy+}\r\n          method: ANY\r\n\r\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\ncustom:\r\n  wsgi:\r\n    app: app.app\r\n    packRequirements: false  # Cambia a false para manejar las dependencias manualmente\r\n\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "98e52c5eff1805d4378ef6acac6cbf5d",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "a95a7a11-5e82-4fda-9730-db405e108da0",
    "orgName": "sergiocestd",
    "userId": "7rmL99t5Jkf5y1YxX9",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "nSJCMckqjlP7n7nPzC",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "sergiocestd",
    "subscription": null,
    "userEmail": "sergioces19@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "295894327291",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "flask-lambda-app-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:295894327291:stack/flask-lambda-app-dev/f961b040-a171-11ef-b6cd-12d92396812f",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:295894327291:stack/flask-lambda-app-dev/f961b040-a171-11ef-b6cd-12d92396812f",
    "serviceProviderAwsCfStackCreated": "2024-11-13T03:47:16.024Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-13T04:17:38.804Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:295894327291:function:flask-lambda-app-dev-app:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-flask-lambda-app-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://2j62sbzlw9.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-flask-lambda-app-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-a0dd1a2c-a04e",
        "ExportName": "sls-flask-lambda-app-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}